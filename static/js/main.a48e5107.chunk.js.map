{"version":3,"sources":["logo.svg","Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","aria-label","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","seenJokes","Set","map","j","handleClick","bind","length","setState","getJokes","numJokesToGet","axios","get","headers","Accept","res","newJoke","data","joke","has","push","id","uuid","add","st","setItem","stringify","alert","delta","handleVote","key","src","alt","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a48e5107.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport \"./Joke.css\";\r\n\r\nexport default class Joke extends Component {\r\n    getColor() {\r\n        if (this.props.votes >= 15) {\r\n            return \"#4CAF50\";\r\n        } else if (this.props.votes >= 12) {\r\n            return \"#8BC34A\";\r\n        } else if (this.props.votes >= 9) {\r\n            return \"#CDDC39\";\r\n        } else if (this.props.votes >= 6) {\r\n            return \"#FFEB3B\";\r\n        } else if (this.props.votes >= 3) {\r\n            return \"#FFC107\";\r\n        } else if (this.props.votes >= 0) {\r\n            return \"#FF9800\";\r\n        } else {\r\n            return \"#f44336\";\r\n        }\r\n    }\r\n\r\n    getEmoji() {\r\n        if (this.props.votes >= 15) {\r\n            return \"em em-rolling_on_the_floor_laughing\";\r\n        } else if (this.props.votes >= 12) {\r\n            return \"em em-laughing\";\r\n        } else if (this.props.votes >= 9) {\r\n            return \"em em-smiley\";\r\n        } else if (this.props.votes >= 6) {\r\n            return \"em em-slightly_smiling_face\";\r\n        } else if (this.props.votes >= 3) {\r\n            return \"em em-neutral_face\";\r\n        } else if (this.props.votes >= 0) {\r\n            return \"em em-confused\";\r\n        } else {\r\n            return \"em em-angry\";\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Joke\">\r\n                <div className=\"Joke-buttons\">\r\n                    <i\r\n                        onClick={this.props.upvote}\r\n                        className=\"fas fa-arrow-up\"\r\n                    ></i>\r\n                    <span\r\n                        className=\"Joke-votes\"\r\n                        style={{ borderColor: this.getColor() }}\r\n                    >\r\n                        {this.props.votes}\r\n                    </span>\r\n                    <i\r\n                        onClick={this.props.downvote}\r\n                        className=\"fas fa-arrow-down\"\r\n                    ></i>\r\n                </div>\r\n                <div className=\"Joke-text\">{this.props.text}</div>\r\n                <div className=\"Joke-smiley\">\r\n                    <i\r\n                        className={this.getEmoji()}\r\n                        // aria-role=\"presentation\"\r\n                        aria-label=\"ROLLING ON THE FLOOR LAUGHING\"\r\n                    ></i>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport Joke from \"./Joke\";\r\nimport \"./JokeList.css\";\r\n\r\nconst API_URL = \"https://icanhazdadjoke.com/\";\r\n\r\nexport default class JokeList extends Component {\r\n    static defaultProps = {\r\n        numJokesToGet: 10,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // parse the JSON with the jokes from localStorage or if it doesn't exist assign an empty array\r\n            jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\r\n            loading: false,\r\n        };\r\n        this.seenJokes = new Set(this.state.jokes.map((j) => j.text));\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // if there are no jokes getJokes\r\n        if (this.state.jokes.length === 0) {\r\n            this.setState({ loading: true }, this.getJokes);\r\n        }\r\n    }\r\n\r\n    async getJokes() {\r\n        try {\r\n            let jokes = [];\r\n            while (jokes.length < this.props.numJokesToGet) {\r\n                let res = await axios.get(API_URL, {\r\n                    headers: { Accept: \"application/json\" },\r\n                });\r\n                let newJoke = res.data.joke;\r\n                if (!this.seenJokes.has(newJoke)) {\r\n                    jokes.push({ id: uuid(), text: newJoke, votes: 0 });\r\n                    this.seenJokes.add(newJoke);\r\n                }\r\n            }\r\n            this.setState(\r\n                // set the state with the new jokes\r\n                (st) => ({\r\n                    // turn off the loading screen and show the new jokes array before the old array\r\n                    loading: false,\r\n                    jokes: [...jokes, ...st.jokes],\r\n                }),\r\n                // save the jokes in local storage\r\n                () =>\r\n                    window.localStorage.setItem(\r\n                        \"jokes\",\r\n                        JSON.stringify(this.state.jokes)\r\n                    )\r\n            );\r\n        } catch (err) {\r\n            alert(\"Error: \", err);\r\n            this.setState({ loading: false });\r\n        }\r\n    }\r\n\r\n    handleVote(id, delta) {\r\n        this.setState(\r\n            (st) => ({\r\n                jokes: st.jokes.map((j) =>\r\n                    // check if the joke id matches the one selected and changes its vote.\r\n                    j.id === id ? { ...j, votes: j.votes + delta } : j\r\n                ),\r\n            }),\r\n            () =>\r\n                window.localStorage.setItem(\r\n                    \"jokes\",\r\n                    JSON.stringify(this.state.jokes)\r\n                )\r\n        );\r\n    }\r\n\r\n    handleClick() {\r\n        // run get jokes only after loading is set true\r\n        this.setState({ loading: true }, this.getJokes);\r\n    }\r\n\r\n    render() {\r\n        // sorted array with jokes in order of votes.\r\n        // let sortedJokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\r\n        // replace this.state.jokes with sortedJokes for awful user experience.\r\n        const jokes = this.state.jokes.map((j) => (\r\n            <Joke\r\n                upvote={() => this.handleVote(j.id, 1)}\r\n                downvote={() => this.handleVote(j.id, -1)}\r\n                id={j.id}\r\n                key={j.id}\r\n                text={j.text}\r\n                votes={j.votes}\r\n            />\r\n        ));\r\n        if (this.state.loading) {\r\n            return (\r\n                <div className=\"JokeList-spinner\">\r\n                    <i className=\"far fa-8x fa-laugh fa-spin\"></i>\r\n                    <h1 className=\"JokeList-title\">Loading...</h1>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"JokeList\">\r\n                <div className=\"JokeList-sidebar\">\r\n                    <h1 className=\"JokeList-title\">\r\n                        <span>Dad</span> Jokes\r\n                    </h1>\r\n                    <img\r\n                        src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\"\r\n                        alt=\"smiley-button\"\r\n                    />\r\n                    <button\r\n                        onClick={this.handleClick}\r\n                        className=\"JokeList-getmore\"\r\n                    >\r\n                        Fetch Jokes\r\n                    </button>\r\n                </div>\r\n                <div className=\"JokeList-jokes\">{jokes}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport JokeList from \"./JokeList\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <JokeList />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}